/* Generated by dbus-binding-tool; do not edit! */

#include <glib/gtypes.h>
#include <glib/gerror.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_broncho_EventManagerInterface
#define DBUS_GLIB_CLIENT_WRAPPERS_org_broncho_EventManagerInterface

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_broncho_EventManagerInterface_trigger_event (DBusGProxy *proxy, const char * IN_type, const gint IN_status, const char * IN_detail, GError **error)

{
  return dbus_g_proxy_call (proxy, "TriggerEvent", error, G_TYPE_STRING, IN_type, G_TYPE_INT, IN_status, G_TYPE_STRING, IN_detail, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_broncho_EventManagerInterface_trigger_event_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_broncho_EventManagerInterface_trigger_event_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_broncho_EventManagerInterface_trigger_event_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_broncho_EventManagerInterface_trigger_event_async (DBusGProxy *proxy, const char * IN_type, const gint IN_status, const char * IN_detail, org_broncho_EventManagerInterface_trigger_event_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "TriggerEvent", org_broncho_EventManagerInterface_trigger_event_async_callback, stuff, g_free, G_TYPE_STRING, IN_type, G_TYPE_INT, IN_status, G_TYPE_STRING, IN_detail, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_broncho_EventManagerInterface_query_event (DBusGProxy *proxy, const char * IN_type, gint* OUT_status, char ** OUT_detail, GError **error)

{
  return dbus_g_proxy_call (proxy, "QueryEvent", error, G_TYPE_STRING, IN_type, G_TYPE_INVALID, G_TYPE_INT, OUT_status, G_TYPE_STRING, OUT_detail, G_TYPE_INVALID);
}

typedef void (*org_broncho_EventManagerInterface_query_event_reply) (DBusGProxy *proxy, gint OUT_status, char * OUT_detail, GError *error, gpointer userdata);

static void
org_broncho_EventManagerInterface_query_event_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = user_data;
  GError *error = NULL;
  gint OUT_status;
  char * OUT_detail;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_status, G_TYPE_STRING, &OUT_detail, G_TYPE_INVALID);
  (*(org_broncho_EventManagerInterface_query_event_reply)data->cb) (proxy, OUT_status, OUT_detail, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_broncho_EventManagerInterface_query_event_async (DBusGProxy *proxy, const char * IN_type, org_broncho_EventManagerInterface_query_event_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "QueryEvent", org_broncho_EventManagerInterface_query_event_async_callback, stuff, g_free, G_TYPE_STRING, IN_type, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_broncho_EventManagerInterface */

G_END_DECLS
